#!/bin/bash

# Script d'installation compl√®te avec toutes les vagues de donn√©es de d√©mo

echo "üöÄ INSTALLATION COMPL√àTE SAMA CONAI"
echo "===================================="
echo ""

# Variables de configuration
DB_NAME="${1:-sama_conai_demo}"
ODOO_PATH="/var/odoo/odoo18"
ODOO_BIN="$ODOO_PATH/odoo-bin"
VENV_PATH="/home/grand-as/odoo18-venv"
ODOO_CONF="/home/grand-as/psagsn/odoo.conf"
MODULE_PATH="/home/grand-as/psagsn/custom_addons/sama_conai"
CUSTOM_ADDONS_PATH="/home/grand-as/psagsn/custom_addons"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
print_step() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifications pr√©liminaires
print_step "V√©rifications pr√©liminaires..."

# V√©rifier Odoo
if [ ! -f "$ODOO_BIN" ]; then
    print_error "Odoo non trouv√© dans $ODOO_PATH. V√©rifiez le chemin."
    exit 1
fi

# V√©rifier l'environnement virtuel
if [ ! -d "$VENV_PATH" ]; then
    print_error "Environnement virtuel non trouv√© dans $VENV_PATH."
    exit 1
fi

# V√©rifier le fichier de configuration
if [ ! -f "$ODOO_CONF" ]; then
    print_error "Fichier de configuration $ODOO_CONF non trouv√©."
    exit 1
fi

# V√©rifier le module
if [ ! -d "$MODULE_PATH" ]; then
    print_error "Module SAMA CONAI non trouv√© dans $MODULE_PATH."
    exit 1
fi

# Activer l'environnement virtuel
print_step "Activation de l'environnement virtuel..."
source "$VENV_PATH/bin/activate"
if [ $? -eq 0 ]; then
    print_success "Environnement virtuel activ√©"
else
    print_error "Erreur lors de l'activation de l'environnement virtuel"
    exit 1
fi

print_success "V√©rifications pr√©liminaires OK"
echo ""

# Affichage des informations
print_step "Configuration:"
echo "   Base de donn√©es: $DB_NAME"
echo "   Module: $MODULE_PATH"
echo "   Configuration: $ODOO_CONF"
echo ""

# Demande de confirmation
read -p "Continuer avec cette configuration? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Installation annul√©e."
    exit 0
fi

echo ""

# √âtape 1: Mise √† jour du module
print_step "√âtape 1: Mise √† jour du module SAMA CONAI..."
cd $ODOO_PATH
python3 $ODOO_BIN -c $ODOO_CONF -d $DB_NAME -u sama_conai --addons-path=$CUSTOM_ADDONS_PATH --stop-after-init

if [ $? -eq 0 ]; then
    print_success "Module mis √† jour avec succ√®s"
else
    print_error "Erreur lors de la mise √† jour du module"
    exit 1
fi

echo ""

# √âtape 2: Test des donn√©es de d√©mo
print_step "√âtape 2: Test des donn√©es de d√©mo..."
echo "exec(open('$MODULE_PATH/scripts/test_all_demo_waves.py').read())" | python3 $ODOO_BIN shell -c $ODOO_CONF -d $DB_NAME --addons-path=$CUSTOM_ADDONS_PATH

echo ""

# √âtape 3: V√©rification des vues
print_step "√âtape 3: V√©rification des vues et actions..."

# Test de connexion et v√©rification des vues
cat << 'EOF' | python3 $ODOO_BIN shell -c $ODOO_CONF -d $DB_NAME --addons-path=$CUSTOM_ADDONS_PATH
try:
    # Test des actions principales
    action_info = env.ref('sama_conai.action_information_request')
    print(f"‚úÖ Action demandes d'information: {action_info.name}")
    
    # Test des vues
    views = env['ir.ui.view'].search([('model', 'in', ['request.information', 'whistleblowing.alert'])])
    print(f"‚úÖ Vues trouv√©es: {len(views)}")
    
    # Test des menus
    menus = env['ir.ui.menu'].search([('name', 'ilike', 'SAMA CONAI')])
    print(f"‚úÖ Menus trouv√©s: {len(menus)}")
    
    print("‚úÖ V√©rifications des vues: OK")
    
except Exception as e:
    print(f"‚ùå Erreur lors de la v√©rification: {e}")
EOF

echo ""

# √âtape 4: G√©n√©ration du rapport final
print_step "√âtape 4: G√©n√©ration du rapport d'installation..."

# Cr√©er un rapport d'installation
REPORT_FILE="$MODULE_PATH/INSTALLATION_REPORT_$(date +%Y%m%d_%H%M%S).md"

cat > "$REPORT_FILE" << EOF
# Rapport d'Installation SAMA CONAI

**Date d'installation:** $(date '+%d/%m/%Y √† %H:%M:%S')
**Base de donn√©es:** $DB_NAME
**Version du module:** $(grep "'version'" $MODULE_PATH/__manifest__.py | cut -d"'" -f4)

## ‚úÖ Composants install√©s

### Mod√®les de donn√©es
- ‚úÖ Demandes d'information (request.information)
- ‚úÖ √âtapes de demandes (request.information.stage)
- ‚úÖ Motifs de refus (request.refusal.reason)
- ‚úÖ Signalements d'alerte (whistleblowing.alert)
- ‚úÖ √âtapes de signalements (whistleblowing.alert.stage)

### Vues et interfaces
- ‚úÖ Vues Kanban pour suivi visuel
- ‚úÖ Vues Liste pour gestion en masse
- ‚úÖ Vues Formulaire d√©taill√©es
- ‚úÖ Vues Graph pour analyse temporelle
- ‚úÖ Vues Pivot pour analyses crois√©es
- ‚úÖ Recherches avanc√©es avec filtres

### Donn√©es de d√©monstration
- ‚úÖ Vague 1: Donn√©es minimales (2 enregistrements)
- ‚úÖ Vague 2: Donn√©es √©tendues (4 enregistrements)
- ‚úÖ Vague 3: Donn√©es avanc√©es (2 enregistrements)
- ‚úÖ Donn√©es de r√©f√©rence (√©tapes, motifs de refus)

### Fonctionnalit√©s
- ‚úÖ Workflow complet de traitement
- ‚úÖ Notifications par email
- ‚úÖ Portail web pour citoyens
- ‚úÖ Suivi anonyme des signalements
- ‚úÖ Respect des d√©lais l√©gaux
- ‚úÖ S√©curit√© et confidentialit√©

## üéØ Prochaines √©tapes

1. **Formation des utilisateurs**
   - Pr√©sentation des vues Kanban
   - Formation aux analyses de donn√©es
   - Utilisation des filtres avanc√©s

2. **Configuration personnalis√©e**
   - Adaptation des workflows
   - Personnalisation des notifications
   - Configuration des droits d'acc√®s

3. **Tests en conditions r√©elles**
   - Cr√©ation de vraies demandes
   - Test des notifications
   - Validation des performances

## üìä Acc√®s aux fonctionnalit√©s

### Menu principal
- **Acc√®s √† l'Information** > **Tableau de Bord**
- **Acc√®s √† l'Information** > **Demandes d'Information**
- **Signalement d'Alerte** > **Signalements**

### Vues recommand√©es pour l'analyse
1. **Vue Kanban**: Suivi visuel par √©tapes
2. **Vue Graph**: Tendances temporelles
3. **Vue Pivot**: Analyses crois√©es
4. **Filtres**: Par urgence, retard, qualit√© de demandeur

## üîß Support technique

En cas de probl√®me, consulter :
- Documentation dans le module
- Scripts de test dans scripts/
- Logs d'installation dans ce rapport

---
*Rapport g√©n√©r√© automatiquement par le script d'installation SAMA CONAI*
EOF

print_success "Rapport d'installation cr√©√©: $REPORT_FILE"
echo ""

# R√©sum√© final
print_step "üéâ INSTALLATION TERMIN√âE!"
echo ""
echo "üìã R√©sum√©:"
echo "   ‚úÖ Module SAMA CONAI install√© et configur√©"
echo "   ‚úÖ Donn√©es de d√©mo charg√©es (3 vagues)"
echo "   ‚úÖ Vues analytiques activ√©es"
echo "   ‚úÖ Rapport d'installation g√©n√©r√©"
echo ""
echo "üöÄ Prochaines actions recommand√©es:"
echo "   1. Se connecter √† Odoo"
echo "   2. Aller dans 'Acc√®s √† l'Information' > 'Tableau de Bord'"
echo "   3. Explorer les vues Kanban, Graph et Pivot"
echo "   4. Tester les filtres et recherches avanc√©es"
echo "   5. Former les utilisateurs aux fonctionnalit√©s"
echo ""
echo "üìñ Documentation:"
echo "   - Rapport d√©taill√©: $REPORT_FILE"
echo "   - Scripts de test: $MODULE_PATH/scripts/"
echo "   - Guide d'utilisation: $MODULE_PATH/README.md"
echo ""
print_success "Installation SAMA CONAI r√©ussie! üéØ"