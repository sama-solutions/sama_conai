#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de v√©rification que SAMA CONAI fonctionne correctement
"""

import requests
import subprocess
import time
import sys

def check_server_status():
    """V√©rifie le statut du serveur Odoo"""
    
    print("üîç V√âRIFICATION DU SERVEUR SAMA CONAI")
    print("=" * 45)
    
    port = 8077
    url = f"http://localhost:{port}"
    
    # 1. V√©rifier la connectivit√© HTTP
    print("üåê 1. Test de connectivit√© HTTP...")
    try:
        response = requests.get(url, timeout=10)
        if response.status_code in [200, 303]:
            print(f"   ‚úÖ Serveur accessible sur {url}")
            print(f"   üìä Code de r√©ponse: {response.status_code}")
        else:
            print(f"   ‚ö†Ô∏è Serveur r√©pond mais code inattendu: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print(f"   ‚ùå Impossible de se connecter √† {url}")
        return False
    except requests.exceptions.Timeout:
        print(f"   ‚ùå Timeout lors de la connexion √† {url}")
        return False
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False
    
    # 2. V√©rifier le processus Odoo
    print(f"\nüîç 2. V√©rification du processus Odoo...")
    try:
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        odoo_processes = [line for line in result.stdout.split('\n') 
                         if 'python' in line and 'odoo' in line and str(port) in line]
        
        if odoo_processes:
            print(f"   ‚úÖ Processus Odoo trouv√©:")
            for process in odoo_processes:
                # Extraire le PID
                pid = process.split()[1]
                print(f"      üéØ PID: {pid}")
        else:
            print(f"   ‚ùå Aucun processus Odoo trouv√© sur le port {port}")
            return False
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des processus: {e}")
    
    # 3. V√©rifier le fichier PID
    print(f"\nüìÑ 3. V√©rification du fichier PID...")
    try:
        with open('/tmp/sama_conai_analytics.pid', 'r') as f:
            pid = f.read().strip()
            print(f"   ‚úÖ Fichier PID trouv√©: {pid}")
            
            # V√©rifier que le processus existe
            try:
                subprocess.run(['kill', '-0', pid], check=True, capture_output=True)
                print(f"   ‚úÖ Processus {pid} actif")
            except subprocess.CalledProcessError:
                print(f"   ‚ö†Ô∏è Processus {pid} non trouv√©")
    except FileNotFoundError:
        print(f"   ‚ö†Ô∏è Fichier PID non trouv√©")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # 4. Test de la page de login Odoo
    print(f"\nüîê 4. Test de la page de login...")
    try:
        login_url = f"{url}/web/login"
        response = requests.get(login_url, timeout=10)
        
        if response.status_code == 200:
            if 'odoo' in response.text.lower() or 'login' in response.text.lower():
                print(f"   ‚úÖ Page de login Odoo accessible")
            else:
                print(f"   ‚ö†Ô∏è Page accessible mais contenu inattendu")
        else:
            print(f"   ‚ùå Page de login inaccessible: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test de login: {e}")
    
    # 5. V√©rifier les logs r√©cents
    print(f"\nüìã 5. V√©rification des logs r√©cents...")
    try:
        result = subprocess.run(['tail', '-n', '10', '/tmp/sama_conai_analytics.log'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            logs = result.stdout.strip()
            if logs:
                print(f"   ‚úÖ Logs r√©cents disponibles")
                # Chercher des erreurs critiques
                if 'ERROR' in logs.upper() or 'CRITICAL' in logs.upper():
                    print(f"   ‚ö†Ô∏è Erreurs d√©tect√©es dans les logs")
                else:
                    print(f"   ‚úÖ Aucune erreur critique dans les logs r√©cents")
            else:
                print(f"   ‚ö†Ô∏è Fichier de logs vide")
        else:
            print(f"   ‚ùå Impossible de lire les logs")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la lecture des logs: {e}")
    
    # 6. Test de performance
    print(f"\n‚ö° 6. Test de performance...")
    try:
        start_time = time.time()
        response = requests.get(url, timeout=10)
        end_time = time.time()
        
        response_time = (end_time - start_time) * 1000  # en millisecondes
        
        if response_time < 1000:
            print(f"   ‚úÖ Temps de r√©ponse excellent: {response_time:.0f}ms")
        elif response_time < 3000:
            print(f"   ‚úÖ Temps de r√©ponse correct: {response_time:.0f}ms")
        else:
            print(f"   ‚ö†Ô∏è Temps de r√©ponse lent: {response_time:.0f}ms")
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test de performance: {e}")
    
    return True

def show_access_info():
    """Affiche les informations d'acc√®s"""
    
    print(f"\nüéâ SAMA CONAI OP√âRATIONNEL !")
    print("=" * 30)
    print(f"")
    print(f"üåê **ACC√àS AU SYST√àME**")
    print(f"   URL: http://localhost:8077")
    print(f"   üë§ Login: admin")
    print(f"   üîë Password: admin")
    print(f"")
    print(f"üìã **MENUS DISPONIBLES**")
    print(f"   üìÑ Acc√®s √† l'Information")
    print(f"   üö® Signalement d'Alerte")
    print(f"   üìä Analytics & Rapports")
    print(f"   ‚öôÔ∏è Administration Transparence")
    print(f"")
    print(f"‚úÖ **STATUT**")
    print(f"   üßπ Menus nettoy√©s (doublons √©limin√©s)")
    print(f"   üìä Structure r√©organis√©e")
    print(f"   üöÄ Pr√™t pour utilisation")
    print(f"")
    print(f"üîß **GESTION**")
    print(f"   üìã Logs: tail -f /tmp/sama_conai_analytics.log")
    print(f"   üõë Arr√™t: kill $(cat /tmp/sama_conai_analytics.pid)")
    print(f"   üîÑ Red√©marrage: ./start_sama_conai_existing_db.sh")

def main():
    """Fonction principale"""
    
    if check_server_status():
        show_access_info()
        
        print(f"\nüí° **RECOMMANDATIONS**")
        print(f"   1. Testez la navigation dans les menus")
        print(f"   2. V√©rifiez l'absence de doublons")
        print(f"   3. Confirmez le bon fonctionnement des actions")
        
        return True
    else:
        print(f"\n‚ùå **PROBL√àMES D√âTECT√âS**")
        print(f"   üîß V√©rifiez les logs: tail -f /tmp/sama_conai_analytics.log")
        print(f"   üîÑ Red√©marrez si n√©cessaire: ./start_sama_conai_existing_db.sh")
        
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)