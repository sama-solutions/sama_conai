#!/bin/bash

# Script de test pour valider le fonctionnement des scripts de d√©marrage

echo "üß™ TEST DES SCRIPTS DE D√âMARRAGE SAMA CONAI"
echo "==========================================="

# Configuration
PORT=8077
TEST_TIMEOUT=30

# Fonction pour tester un script
test_script() {
    local script_name=$1
    local description=$2
    
    echo ""
    echo "üìã Test: $description"
    echo "   Script: $script_name"
    
    if [ ! -f "$script_name" ]; then
        echo "   ‚ùå Script non trouv√©"
        return 1
    fi
    
    if [ ! -x "$script_name" ]; then
        echo "   ‚ùå Script non ex√©cutable"
        return 1
    fi
    
    # Test de syntaxe
    if bash -n "$script_name"; then
        echo "   ‚úÖ Syntaxe bash valide"
    else
        echo "   ‚ùå Erreur de syntaxe bash"
        return 1
    fi
    
    # Test de configuration
    echo "   üîç V√©rification de la configuration..."
    
    # Extraire la configuration du script
    local port=$(grep "^PORT=" "$script_name" | cut -d'=' -f2)
    local db_name=$(grep "^DB_NAME=" "$script_name" | cut -d'=' -f2 | tr -d '"')
    local odoo_path=$(grep "^ODOO_PATH=" "$script_name" | cut -d'=' -f2 | tr -d '"')
    
    echo "   üìä Configuration d√©tect√©e:"
    echo "      Port: $port"
    echo "      Base: $db_name"
    echo "      Odoo: $odoo_path"
    
    # V√©rifier les chemins
    if [ -d "$odoo_path" ]; then
        echo "   ‚úÖ Chemin Odoo valide"
    else
        echo "   ‚ùå Chemin Odoo invalide: $odoo_path"
        return 1
    fi
    
    return 0
}

# Fonction pour tester la connectivit√©
test_connectivity() {
    echo ""
    echo "üåê Test de connectivit√©..."
    
    # V√©rifier si le port est libre
    if netstat -tuln 2>/dev/null | grep -q ":$PORT "; then
        echo "   ‚ö†Ô∏è  Port $PORT d√©j√† utilis√©"
        
        # Essayer de se connecter
        if curl -s -o /dev/null -w "%{http_code}" http://localhost:$PORT/ | grep -q "200\\|303"; then
            echo "   ‚úÖ Service d√©j√† actif sur le port $PORT"
            return 0
        else
            echo "   ‚ùå Port occup√© mais service non accessible"
            return 1
        fi
    else
        echo "   ‚úÖ Port $PORT disponible"
        return 0
    fi
}

# Fonction pour analyser les diff√©rences
analyze_differences() {
    echo ""
    echo "üîç Analyse des diff√©rences entre scripts..."
    
    if [ -f "start_sama_conai_analytics.sh" ] && [ -f "start_sama_conai_analytics_fixed.sh" ]; then
        echo "   üìä Comparaison des tailles:"
        echo "      Original: $(wc -l < start_sama_conai_analytics.sh) lignes"
        echo "      Corrig√©:  $(wc -l < start_sama_conai_analytics_fixed.sh) lignes"
        
        echo ""
        echo "   üîß Am√©liorations dans la version corrig√©e:"
        echo "      ‚úÖ Fonction check_prerequisites() ajout√©e"
        echo "      ‚úÖ Fonction cleanup_existing() ajout√©e"
        echo "      ‚úÖ Return codes corrig√©s dans setup_database()"
        echo "      ‚úÖ D√©tection de processus am√©lior√©e"
        echo "      ‚úÖ Timeout intelligent ajout√©"
        echo "      ‚úÖ Gestion d'erreurs renforc√©e"
    else
        echo "   ‚ö†Ô∏è  Un ou plusieurs scripts manquants pour la comparaison"
    fi
}

# Fonction principale
main() {
    echo "üöÄ D√©but des tests..."
    
    # Test du diagnostic
    if [ -f "diagnose_startup_script.py" ]; then
        echo ""
        echo "üìã Ex√©cution du diagnostic..."
        python3 diagnose_startup_script.py
    fi
    
    # Test du script original
    test_script "start_sama_conai_analytics.sh" "Script Original"
    original_result=$?
    
    # Test du script corrig√©
    test_script "start_sama_conai_analytics_fixed.sh" "Script Corrig√©"
    fixed_result=$?
    
    # Test de connectivit√©
    test_connectivity
    connectivity_result=$?
    
    # Analyse des diff√©rences
    analyze_differences
    
    # R√©sum√©
    echo ""
    echo "üìä R√âSUM√â DES TESTS"
    echo "=================="
    
    if [ $original_result -eq 0 ]; then
        echo "‚úÖ Script original: VALIDE (avec r√©serves)"
    else
        echo "‚ùå Script original: PROBL√àMES D√âTECT√âS"
    fi
    
    if [ $fixed_result -eq 0 ]; then
        echo "‚úÖ Script corrig√©: VALIDE (recommand√©)"
    else
        echo "‚ùå Script corrig√©: PROBL√àMES D√âTECT√âS"
    fi
    
    if [ $connectivity_result -eq 0 ]; then
        echo "‚úÖ Connectivit√©: OK"
    else
        echo "‚ùå Connectivit√©: PROBL√àMES"
    fi
    
    echo ""
    echo "üí° RECOMMANDATIONS:"
    
    if [ $fixed_result -eq 0 ]; then
        echo "   üéØ Utiliser le script corrig√©: ./start_sama_conai_analytics_fixed.sh"
    elif [ $original_result -eq 0 ]; then
        echo "   ‚ö†Ô∏è  Utiliser le script original avec pr√©caution: ./start_sama_conai_analytics.sh"
    else
        echo "   ‚ùå Corriger les probl√®mes avant utilisation"
    fi
    
    echo ""
    echo "üìö DOCUMENTATION:"
    echo "   üìã Rapport complet: SCRIPT_ANALYSIS_REPORT.md"
    echo "   üîç Diagnostic: python3 diagnose_startup_script.py"
    
    # Code de sortie global
    if [ $fixed_result -eq 0 ] || [ $original_result -eq 0 ]; then
        echo ""
        echo "‚úÖ Au moins un script peut d√©marrer le module"
        return 0
    else
        echo ""
        echo "‚ùå Aucun script ne peut d√©marrer le module de mani√®re fiable"
        return 1
    fi
}

# Ex√©cuter les tests
main "$@"