#!/bin/bash

# Script de test pour le module Analytics SAMA CONAI

echo "üß™ TEST MODULE ANALYTICS SAMA CONAI"
echo "==================================="

# Configuration
DEV_PORT=8076
DB_NAME="sama_conai_dev_analytics"
VENV_PATH="/home/grand-as/odoo18-venv"
ODOO_PATH="/var/odoo/odoo18"

echo "üìã Configuration de test:"
echo "   Port: $DEV_PORT"
echo "   Base: $DB_NAME"
echo ""

# Fonction pour tester la connectivit√©
test_connectivity() {
    echo "üåê Test de connectivit√©..."
    
    response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$DEV_PORT/)
    
    if [ "$response" = "200" ] || [ "$response" = "303" ]; then
        echo "   ‚úÖ Serveur accessible (Code: $response)"
        return 0
    else
        echo "   ‚ùå Serveur non accessible (Code: $response)"
        return 1
    fi
}

# Fonction pour tester l'installation du module
test_module_installation() {
    echo "üì¶ Test d'installation du module..."
    
    # V√©rifier les logs d'installation
    if grep -q "Module sama_conai loaded" /tmp/odoo_dev_analytics.log 2>/dev/null; then
        echo "   ‚úÖ Module sama_conai charg√© avec succ√®s"
    else
        echo "   ‚ö†Ô∏è Statut de chargement du module incertain"
    fi
    
    # V√©rifier les erreurs dans les logs
    error_count=$(grep -c "ERROR\|CRITICAL" /tmp/odoo_dev_analytics.log 2>/dev/null || echo "0")
    
    if [ "$error_count" -eq 0 ]; then
        echo "   ‚úÖ Aucune erreur critique d√©tect√©e"
    else
        echo "   ‚ö†Ô∏è $error_count erreur(s) d√©tect√©e(s) dans les logs"
        echo "   üìã Derni√®res erreurs:"
        grep "ERROR\|CRITICAL" /tmp/odoo_dev_analytics.log | tail -3
    fi
}

# Fonction pour tester les mod√®les Analytics
test_analytics_models() {
    echo "üîç Test des mod√®les Analytics..."
    
    # V√©rifier que les mod√®les sont charg√©s
    models_to_check=(
        "executive.dashboard"
        "auto.report.generator"
        "auto.report.instance"
        "predictive.analytics"
    )
    
    for model in "${models_to_check[@]}"; do
        if grep -q "$model" /tmp/odoo_dev_analytics.log 2>/dev/null; then
            echo "   ‚úÖ Mod√®le $model d√©tect√©"
        else
            echo "   ‚ö†Ô∏è Mod√®le $model non d√©tect√© dans les logs"
        fi
    done
}

# Fonction pour tester les vues
test_analytics_views() {
    echo "üëÅÔ∏è Test des vues Analytics..."
    
    # V√©rifier que les fichiers de vues existent
    views_to_check=(
        "views/analytics/executive_dashboard_views.xml"
        "views/analytics/auto_report_generator_views.xml"
    )
    
    for view in "${views_to_check[@]}"; do
        if [ -f "$view" ]; then
            echo "   ‚úÖ Vue $view existe"
        else
            echo "   ‚ùå Vue $view manquante"
        fi
    done
    
    # V√©rifier le chargement des vues dans les logs
    if grep -q "loading sama_conai/views/analytics" /tmp/odoo_dev_analytics.log 2>/dev/null; then
        echo "   ‚úÖ Vues Analytics charg√©es"
    else
        echo "   ‚ö†Ô∏è Chargement des vues Analytics incertain"
    fi
}

# Fonction pour tester les menus
test_analytics_menus() {
    echo "üìã Test des menus Analytics..."
    
    # V√©rifier que les menus sont d√©finis
    if grep -q "menu_sama_conai_analytics" views/menus.xml; then
        echo "   ‚úÖ Menu Analytics d√©fini"
    else
        echo "   ‚ùå Menu Analytics manquant"
    fi
    
    if grep -q "menu_executive_dashboard" views/menus.xml; then
        echo "   ‚úÖ Menu Dashboard Ex√©cutif d√©fini"
    else
        echo "   ‚ùå Menu Dashboard Ex√©cutif manquant"
    fi
    
    if grep -q "menu_auto_report_generator" views/menus.xml; then
        echo "   ‚úÖ Menu G√©n√©rateurs de Rapports d√©fini"
    else
        echo "   ‚ùå Menu G√©n√©rateurs de Rapports manquant"
    fi
}

# Fonction pour tester la structure des fichiers
test_file_structure() {
    echo "üìÅ Test de la structure des fichiers..."
    
    # V√©rifier la structure des mod√®les Analytics
    if [ -d "models/analytics" ]; then
        echo "   ‚úÖ Dossier models/analytics existe"
        
        analytics_files=(
            "models/analytics/__init__.py"
            "models/analytics/executive_dashboard.py"
            "models/analytics/auto_report_generator.py"
            "models/analytics/predictive_analytics.py"
        )
        
        for file in "${analytics_files[@]}"; do
            if [ -f "$file" ]; then
                echo "   ‚úÖ Fichier $file existe"
            else
                echo "   ‚ùå Fichier $file manquant"
            fi
        done
    else
        echo "   ‚ùå Dossier models/analytics manquant"
    fi
    
    # V√©rifier la structure des vues
    if [ -d "views/analytics" ]; then
        echo "   ‚úÖ Dossier views/analytics existe"
    else
        echo "   ‚ùå Dossier views/analytics manquant"
    fi
}

# Fonction pour tester les d√©pendances
test_dependencies() {
    echo "üîó Test des d√©pendances..."
    
    # V√©rifier que les d√©pendances de base sont pr√©sentes
    required_deps=("base" "mail" "portal" "hr")
    
    for dep in "${required_deps[@]}"; do
        if grep -q "\"$dep\"" __manifest__.py; then
            echo "   ‚úÖ D√©pendance $dep pr√©sente"
        else
            echo "   ‚ùå D√©pendance $dep manquante"
        fi
    done
    
    # V√©rifier qu'il n'y a pas de d√©pendances interdites
    forbidden_deps=("account" "social_media" "website_payment")
    
    for dep in "${forbidden_deps[@]}"; do
        if grep -q "\"$dep\"" __manifest__.py; then
            echo "   ‚ö†Ô∏è D√©pendance interdite $dep d√©tect√©e"
        else
            echo "   ‚úÖ Pas de d√©pendance interdite $dep"
        fi
    done
}

# Fonction pour g√©n√©rer un rapport de test
generate_test_report() {
    echo ""
    echo "üìä RAPPORT DE TEST"
    echo "=================="
    
    # Compter les tests r√©ussis/√©chou√©s
    total_tests=0
    passed_tests=0
    
    # Analyser les r√©sultats (simplifi√©)
    if test_connectivity; then
        ((passed_tests++))
    fi
    ((total_tests++))
    
    echo ""
    echo "üìà R√©sultats:"
    echo "   Tests pass√©s: $passed_tests/$total_tests"
    
    if [ $passed_tests -eq $total_tests ]; then
        echo "   ‚úÖ Tous les tests sont pass√©s"
        return 0
    else
        echo "   ‚ö†Ô∏è Certains tests ont √©chou√©"
        return 1
    fi
}

# Fonction principale
main() {
    echo "üöÄ D√©but des tests..."
    echo ""
    
    # Tests de structure
    test_file_structure
    echo ""
    
    # Tests de d√©pendances
    test_dependencies
    echo ""
    
    # Tests de configuration
    test_analytics_menus
    echo ""
    
    # Tests de vues
    test_analytics_views
    echo ""
    
    # Tests de connectivit√© (si le serveur tourne)
    if pgrep -f "odoo.*$DEV_PORT" > /dev/null; then
        echo "üîç Serveur d√©tect√©, tests de connectivit√©..."
        test_connectivity
        echo ""
        
        test_module_installation
        echo ""
        
        test_analytics_models
        echo ""
    else
        echo "‚ö†Ô∏è Serveur non d√©marr√©, tests de connectivit√© ignor√©s"
        echo "   Utilisez: ./dev_scripts/start_dev_analytics.sh"
        echo ""
    fi
    
    # G√©n√©rer le rapport final
    generate_test_report
}

# Ex√©cution
main "$@"