#!/usr/bin/env node\n\n/**\n * Diagnostic complet SAMA CONAI\n * Identifie les problèmes de connexion et de boucle infinie\n */\n\nconst axios = require('axios');\nconst { spawn } = require('child_process');\nconst fs = require('fs');\n\nclass DiagnosticComplet {\n  constructor() {\n    this.problemes = [];\n    this.solutions = [];\n    this.services = {\n      mobile: { port: 3005, status: 'unknown' },\n      odoo: { port: 8077, status: 'unknown' },\n      proxy: { port: 8078, status: 'unknown' }\n    };\n  }\n\n  async executer() {\n    console.log('🔍 DIAGNOSTIC COMPLET SAMA CONAI');\n    console.log('='.repeat(50));\n    \n    await this.verifierServices();\n    await this.testerAuthentification();\n    await this.testerAPI();\n    await this.verifierOdooLogin();\n    await this.testerProxy();\n    \n    this.genererRapport();\n    await this.proposerSolutions();\n  }\n\n  async verifierServices() {\n    console.log('\\n📡 VÉRIFICATION DES SERVICES');\n    console.log('-'.repeat(30));\n    \n    for (const [nom, service] of Object.entries(this.services)) {\n      try {\n        const response = await axios.head(`http://localhost:${service.port}`, { timeout: 5000 });\n        service.status = 'actif';\n        service.httpCode = response.status;\n        console.log(`✅ ${nom.toUpperCase()} (${service.port}): ACTIF - HTTP ${response.status}`);\n      } catch (error) {\n        service.status = 'erreur';\n        service.error = error.message;\n        console.log(`❌ ${nom.toUpperCase()} (${service.port}): ERREUR - ${error.message}`);\n        this.problemes.push(`Service ${nom} non accessible sur le port ${service.port}`);\n      }\n    }\n  }\n\n  async testerAuthentification() {\n    console.log('\\n🔐 TEST D\\'AUTHENTIFICATION MOBILE');\n    console.log('-'.repeat(30));\n    \n    if (this.services.mobile.status !== 'actif') {\n      console.log('⚠️ Service mobile non disponible, test ignoré');\n      return;\n    }\n    \n    try {\n      const startTime = Date.now();\n      const response = await axios.post(\n        'http://localhost:3005/api/mobile/auth/login',\n        { email: 'admin', password: 'admin' },\n        { \n          headers: { 'Content-Type': 'application/json' },\n          timeout: 15000\n        }\n      );\n      const responseTime = Date.now() - startTime;\n      \n      if (response.data.success) {\n        console.log(`✅ Authentification: SUCCÈS (${responseTime}ms)`);\n        console.log(`   Token: ${response.data.data.token.substring(0, 20)}...`);\n        console.log(`   Utilisateur: ${response.data.data.user.name}`);\n        console.log(`   Source: ${response.data.data.dataSource}`);\n        this.authToken = response.data.data.token;\n        \n        if (responseTime > 10000) {\n          this.problemes.push('Authentification très lente (>10s)');\n        }\n      } else {\n        console.log('❌ Authentification: ÉCHEC');\n        console.log(`   Erreur: ${response.data.error}`);\n        this.problemes.push('Authentification échoue avec admin/admin');\n      }\n    } catch (error) {\n      console.log('❌ Authentification: TIMEOUT/ERREUR');\n      console.log(`   Détails: ${error.message}`);\n      this.problemes.push('Timeout ou erreur lors de l\\'authentification');\n    }\n  }\n\n  async testerAPI() {\n    console.log('\\n🔌 TEST DES ENDPOINTS API');\n    console.log('-'.repeat(30));\n    \n    if (!this.authToken) {\n      console.log('⚠️ Pas de token, tests API ignorés');\n      return;\n    }\n    \n    const endpoints = [\n      { path: '/api/mobile/citizen/dashboard', nom: 'Dashboard', timeout: 15000 },\n      { path: '/api/mobile/citizen/requests', nom: 'Demandes', timeout: 10000 }\n    ];\n    \n    for (const endpoint of endpoints) {\n      try {\n        const startTime = Date.now();\n        const response = await axios.get(\n          `http://localhost:3005${endpoint.path}`,\n          { \n            headers: { 'Authorization': `Bearer ${this.authToken}` },\n            timeout: endpoint.timeout\n          }\n        );\n        const responseTime = Date.now() - startTime;\n        \n        if (response.data.success) {\n          console.log(`✅ ${endpoint.nom}: OK (${responseTime}ms)`);\n          if (response.data.source) {\n            console.log(`   Source: ${response.data.source}`);\n          }\n          \n          if (responseTime > 8000) {\n            this.problemes.push(`Endpoint ${endpoint.nom} très lent (${responseTime}ms)`);\n          }\n        } else {\n          console.log(`❌ ${endpoint.nom}: ERREUR`);\n          console.log(`   Message: ${response.data.error}`);\n          this.problemes.push(`Endpoint ${endpoint.nom} retourne une erreur`);\n        }\n      } catch (error) {\n        console.log(`❌ ${endpoint.nom}: TIMEOUT/ERREUR`);\n        console.log(`   Détails: ${error.message}`);\n        this.problemes.push(`Endpoint ${endpoint.nom} inaccessible ou timeout`);\n      }\n    }\n  }\n\n  async verifierOdooLogin() {\n    console.log('\\n🏛️ VÉRIFICATION LOGIN ODOO');\n    console.log('-'.repeat(30));\n    \n    if (this.services.odoo.status !== 'actif') {\n      console.log('⚠️ Service Odoo non disponible');\n      this.problemes.push('Backend Odoo non accessible');\n      return;\n    }\n    \n    try {\n      // Test de la page de login Odoo\n      const response = await axios.get('http://localhost:8077/web/login', { timeout: 10000 });\n      \n      if (response.data.includes('oe_login_form')) {\n        console.log('✅ Page de login Odoo: ACCESSIBLE');\n        \n        // Vérifier si le formulaire est masqué\n        if (response.data.includes('d-none')) {\n          console.log('⚠️ Formulaire de login masqué (classe d-none)');\n          this.problemes.push('Formulaire de login Odoo masqué par CSS');\n        } else {\n          console.log('✅ Formulaire de login: VISIBLE');\n        }\n        \n        // Vérifier les assets\n        if (response.data.includes('web.assets_frontend')) {\n          console.log('✅ Assets frontend: CHARGÉS');\n        } else {\n          console.log('⚠️ Assets frontend manquants');\n          this.problemes.push('Assets frontend Odoo manquants');\n        }\n      } else {\n        console.log('❌ Page de login Odoo: STRUCTURE INCORRECTE');\n        this.problemes.push('Structure de la page de login Odoo incorrecte');\n      }\n    } catch (error) {\n      console.log('❌ Page de login Odoo: INACCESSIBLE');\n      console.log(`   Erreur: ${error.message}`);\n      this.problemes.push('Page de login Odoo inaccessible');\n    }\n  }\n\n  async testerProxy() {\n    console.log('\\n🔗 TEST DU PROXY IFRAME');\n    console.log('-'.repeat(30));\n    \n    if (this.services.proxy.status !== 'actif') {\n      console.log('⚠️ Service proxy non disponible');\n      this.problemes.push('Proxy iframe non démarré');\n      return;\n    }\n    \n    try {\n      const response = await axios.get('http://localhost:8078/web/login', { timeout: 10000 });\n      \n      // Vérifier les headers pour iframe\n      const headers = response.headers;\n      const xFrameOptions = headers['x-frame-options'] || headers['X-Frame-Options'];\n      const csp = headers['content-security-policy'] || headers['Content-Security-Policy'];\n      \n      console.log('📋 Headers de réponse proxy:');\n      console.log(`   X-Frame-Options: ${xFrameOptions || 'absent'}`);\n      console.log(`   Content-Security-Policy: ${csp || 'absent'}`);\n      \n      if (xFrameOptions && xFrameOptions.toLowerCase() !== 'allowall') {\n        console.log('⚠️ X-Frame-Options bloque l\\'iframe');\n        this.problemes.push('Headers X-Frame-Options bloquent l\\'iframe');\n      } else {\n        console.log('✅ X-Frame-Options: OK pour iframe');\n      }\n      \n      if (csp && !csp.includes('frame-ancestors')) {\n        console.log('⚠️ CSP bloque l\\'iframe');\n        this.problemes.push('Content-Security-Policy bloque l\\'iframe');\n      } else {\n        console.log('✅ CSP: OK pour iframe');\n      }\n      \n    } catch (error) {\n      console.log('❌ Proxy iframe: ERREUR');\n      console.log(`   Détails: ${error.message}`);\n      this.problemes.push('Proxy iframe ne répond pas');\n    }\n  }\n\n  genererRapport() {\n    console.log('\\n📋 RAPPORT DE DIAGNOSTIC');\n    console.log('='.repeat(50));\n    \n    if (this.problemes.length === 0) {\n      console.log('✅ AUCUN PROBLÈME MAJEUR DÉTECTÉ');\n      console.log('   Le système semble fonctionner correctement.');\n      return;\n    }\n    \n    console.log(`❌ ${this.problemes.length} PROBLÈME(S) DÉTECTÉ(S):`);\n    this.problemes.forEach((probleme, index) => {\n      console.log(`   ${index + 1}. ${probleme}`);\n    });\n  }\n\n  async proposerSolutions() {\n    console.log('\\n🔧 SOLUTIONS RECOMMANDÉES');\n    console.log('-'.repeat(30));\n    \n    if (this.problemes.length === 0) {\n      console.log('✅ Aucune action requise');\n      return;\n    }\n    \n    // Analyser les problèmes et proposer des solutions\n    this.problemes.forEach(probleme => {\n      if (probleme.includes('Service') && probleme.includes('non accessible')) {\n        this.solutions.push({\n          probleme: probleme,\n          solution: 'Redémarrer les services SAMA CONAI',\n          commande: './restart_sama_conai_fixed.sh'\n        });\n      }\n      \n      if (probleme.includes('Authentification') && probleme.includes('lente')) {\n        this.solutions.push({\n          probleme: probleme,\n          solution: 'Optimiser les timeouts et la connexion Odoo',\n          commande: 'Vérifier la configuration Odoo et les timeouts'\n        });\n      }\n      \n      if (probleme.includes('Endpoint') && probleme.includes('lent')) {\n        this.solutions.push({\n          probleme: probleme,\n          solution: 'Augmenter les timeouts et optimiser les requêtes',\n          commande: 'Modifier les timeouts dans server.js et odoo-api.js'\n        });\n      }\n      \n      if (probleme.includes('Formulaire de login') && probleme.includes('masqué')) {\n        this.solutions.push({\n          probleme: probleme,\n          solution: 'Corriger les assets Odoo ou la configuration',\n          commande: 'Redémarrer Odoo et vérifier les assets'\n        });\n      }\n      \n      if (probleme.includes('iframe')) {\n        this.solutions.push({\n          probleme: probleme,\n          solution: 'Corriger la configuration du proxy pour iframe',\n          commande: 'Vérifier proxy_server.js et les headers'\n        });\n      }\n    });\n    \n    // Supprimer les doublons\n    const solutionsUniques = this.solutions.filter((solution, index, self) => \n      index === self.findIndex(s => s.solution === solution.solution)\n    );\n    \n    solutionsUniques.forEach((solution, index) => {\n      console.log(`\\n${index + 1}. ${solution.solution}`);\n      console.log(`   Problème: ${solution.probleme}`);\n      console.log(`   Action: ${solution.commande}`);\n    });\n    \n    // Proposer un script de correction automatique\n    console.log('\\n🚀 CORRECTION AUTOMATIQUE');\n    console.log('-'.repeat(30));\n    console.log('Pour appliquer les corrections automatiquement:');\n    console.log('1. bash restart_sama_conai_fixed.sh');\n    console.log('2. bash test_sama_conai_connection.sh');\n    console.log('3. Accéder à http://localhost:3005');\n  }\n}\n\n// Exécution du diagnostic\nif (require.main === module) {\n  const diagnostic = new DiagnosticComplet();\n  diagnostic.executer().catch(error => {\n    console.error('❌ Erreur lors du diagnostic:', error.message);\n    process.exit(1);\n  });\n}\n\nmodule.exports = DiagnosticComplet;"