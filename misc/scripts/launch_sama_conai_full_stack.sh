#!/bin/bash

# ========================================
# SAMA CONAI - SCRIPT DE LANCEMENT COMPLET
# ========================================
# Lancement de tout le stack : Odoo + Applications mobiles + Services
# Version: 1.0.0
# Auteur: SAMA CONAI Team

set -e  # Arr√™ter le script en cas d'erreur

# Variables de configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_NAME="SAMA CONAI"
VERSION="1.0.0"

# Ports par d√©faut
ODOO_PORT=8069
MOBILE_WEB_PORT=3001
MOBILE_APP_PORT=3000
POSTGRES_PORT=5432

# Base de donn√©es
DB_NAME="sama_conai_production"
DB_USER="odoo"
DB_PASSWORD="odoo"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Fichiers PID pour le suivi des processus
ODOO_PID_FILE="$SCRIPT_DIR/.pids/odoo.pid"
MOBILE_WEB_PID_FILE="$SCRIPT_DIR/.pids/mobile_web.pid"
POSTGRES_PID_FILE="$SCRIPT_DIR/.pids/postgres.pid"

# Logs
LOG_DIR="$SCRIPT_DIR/logs"
ODOO_LOG="$LOG_DIR/odoo.log"
MOBILE_WEB_LOG="$LOG_DIR/mobile_web.log"
POSTGRES_LOG="$LOG_DIR/postgres.log"

# ========================================
# FONCTIONS UTILITAIRES
# ========================================

print_banner() {
    echo ""
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë                    SAMA CONAI FULL STACK                     ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë              Plateforme de Transparence S√©n√©gal             ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë                                                              ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë  üá∏üá≥ R√©publique du S√©n√©gal - Transparence Num√©rique         ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë                     Version $VERSION                          ‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

print_status() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

print_error() {
    echo -e "${RED}‚ùå${NC} $1"
}

print_header() {
    echo ""
    echo -e "${CYAN}üîß $1${NC}"
    echo "=================================================="
}

print_success() {
    echo -e "${GREEN}üéâ${NC} $1"
}

# ========================================
# FONCTIONS DE V√âRIFICATION
# ========================================

check_prerequisites() {
    print_header "V√âRIFICATION DES PR√âREQUIS"
    
    local missing_deps=()
    
    # V√©rifier Python3
    if ! command -v python3 &> /dev/null; then
        missing_deps+=("python3")
    else
        print_status "Python3 d√©tect√©: $(python3 --version)"
    fi
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        missing_deps+=("nodejs")
    else
        print_status "Node.js d√©tect√©: $(node --version)"
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        missing_deps+=("npm")
    else
        print_status "npm d√©tect√©: $(npm --version)"
    fi
    
    # V√©rifier PostgreSQL
    if ! command -v psql &> /dev/null; then
        missing_deps+=("postgresql")
    else
        print_status "PostgreSQL d√©tect√©: $(psql --version | head -n1)"
    fi
    
    # V√©rifier Docker (optionnel)
    if command -v docker &> /dev/null; then
        print_status "Docker d√©tect√©: $(docker --version)"
    else
        print_warning "Docker non d√©tect√© (optionnel)"
    fi
    
    # V√©rifier les d√©pendances manquantes
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "D√©pendances manquantes: ${missing_deps[*]}"
        echo ""
        echo "Pour installer sur Ubuntu/Debian:"
        echo "sudo apt update"
        echo "sudo apt install python3 python3-pip nodejs npm postgresql postgresql-contrib"
        echo ""
        exit 1
    fi
    
    print_status "Tous les pr√©requis sont satisfaits"
}

check_ports() {
    print_header "V√âRIFICATION DES PORTS"
    
    local ports_to_check=($ODOO_PORT $MOBILE_WEB_PORT $POSTGRES_PORT)
    local occupied_ports=()
    
    for port in "${ports_to_check[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            occupied_ports+=($port)
            print_warning "Port $port d√©j√† utilis√©"
        else
            print_status "Port $port disponible"
        fi
    done
    
    if [ ${#occupied_ports[@]} -ne 0 ]; then
        print_warning "Certains ports sont occup√©s. Tentative de lib√©ration..."
        for port in "${occupied_ports[@]}"; do
            local pid=$(lsof -ti:$port)
            if [ ! -z "$pid" ]; then
                print_info "Arr√™t du processus utilisant le port $port (PID: $pid)"
                kill $pid 2>/dev/null || true
                sleep 2
            fi
        done
    fi
}

check_directories() {
    print_header "V√âRIFICATION DE LA STRUCTURE DU PROJET"
    
    # Cr√©er les r√©pertoires n√©cessaires
    mkdir -p "$SCRIPT_DIR/.pids"
    mkdir -p "$LOG_DIR"
    mkdir -p "$SCRIPT_DIR/backups"
    
    # V√©rifier les r√©pertoires critiques
    local required_dirs=("models" "views" "controllers" "static" "templates")
    
    for dir in "${required_dirs[@]}"; do
        if [ -d "$SCRIPT_DIR/$dir" ]; then
            print_status "R√©pertoire $dir trouv√©"
        else
            print_error "R√©pertoire $dir manquant"
            exit 1
        fi
    done
    
    # V√©rifier les applications mobiles
    if [ -d "$SCRIPT_DIR/mobile_app_web" ]; then
        print_status "Application mobile web trouv√©e"
    else
        print_warning "Application mobile web non trouv√©e"
    fi
    
    if [ -d "$SCRIPT_DIR/mobile_app" ]; then
        print_status "Application mobile React Native trouv√©e"
    else
        print_warning "Application mobile React Native non trouv√©e"
    fi
}

# ========================================
# FONCTIONS DE D√âMARRAGE DES SERVICES
# ========================================

start_postgresql() {
    print_header "D√âMARRAGE DE POSTGRESQL"
    
    # V√©rifier si PostgreSQL est d√©j√† en cours d'ex√©cution
    if pgrep -x "postgres" > /dev/null; then
        print_status "PostgreSQL d√©j√† en cours d'ex√©cution"
        return 0
    fi
    
    # D√©marrer PostgreSQL selon le syst√®me
    if systemctl is-active --quiet postgresql; then
        print_status "PostgreSQL d√©j√† actif via systemctl"
    else
        print_info "D√©marrage de PostgreSQL..."
        if command -v systemctl &> /dev/null; then
            sudo systemctl start postgresql
            print_status "PostgreSQL d√©marr√© via systemctl"
        elif command -v service &> /dev/null; then
            sudo service postgresql start
            print_status "PostgreSQL d√©marr√© via service"
        else
            print_warning "Impossible de d√©marrer PostgreSQL automatiquement"
            print_info "Veuillez d√©marrer PostgreSQL manuellement"
        fi
    fi
    
    # Attendre que PostgreSQL soit pr√™t
    print_info "Attente de la disponibilit√© de PostgreSQL..."
    for i in {1..30}; do
        if pg_isready -h localhost -p $POSTGRES_PORT >/dev/null 2>&1; then
            print_status "PostgreSQL est pr√™t"
            return 0
        fi
        sleep 1
    done
    
    print_error "PostgreSQL n'est pas disponible apr√®s 30 secondes"
    return 1
}

setup_database() {
    print_header "CONFIGURATION DE LA BASE DE DONN√âES"
    
    # V√©rifier si la base de donn√©es existe
    if psql -h localhost -U $DB_USER -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; then
        print_status "Base de donn√©es $DB_NAME existe d√©j√†"
    else
        print_info "Cr√©ation de la base de donn√©es $DB_NAME..."
        createdb -h localhost -U $DB_USER $DB_NAME
        print_status "Base de donn√©es $DB_NAME cr√©√©e"
    fi
}

start_odoo() {
    print_header "D√âMARRAGE D'ODOO"
    
    # V√©rifier si Odoo est d√©j√† en cours d'ex√©cution
    if [ -f "$ODOO_PID_FILE" ] && kill -0 $(cat "$ODOO_PID_FILE") 2>/dev/null; then
        print_status "Odoo d√©j√† en cours d'ex√©cution (PID: $(cat $ODOO_PID_FILE))"
        return 0
    fi
    
    # Trouver l'ex√©cutable Odoo
    local odoo_bin=""
    local possible_paths=(\n        \"/var/odoo/odoo18/odoo-bin\"\n        \"/opt/odoo/odoo-bin\"\n        \"/usr/bin/odoo\"\n        \"$(which odoo 2>/dev/null)\"\n        \"$(which odoo-bin 2>/dev/null)\"\n    )\n    \n    for path in \"${possible_paths[@]}\"; do\n        if [ -f \"$path\" ] && [ -x \"$path\" ]; then\n            odoo_bin=\"$path\"\n            break\n        fi\n    done\n    \n    if [ -z \"$odoo_bin\" ]; then\n        print_error \"Ex√©cutable Odoo non trouv√©\"\n        print_info \"Veuillez installer Odoo ou ajuster le chemin dans le script\"\n        return 1\n    fi\n    \n    print_info \"Utilisation d'Odoo: $odoo_bin\"\n    \n    # Configuration Odoo\n    local addons_path=\"/var/odoo/odoo18/addons,$SCRIPT_DIR\"\n    \n    print_info \"D√©marrage d'Odoo sur le port $ODOO_PORT...\"\n    \n    # D√©marrer Odoo en arri√®re-plan\n    nohup python3 \"$odoo_bin\" \\\n        --database=\"$DB_NAME\" \\\n        --addons-path=\"$addons_path\" \\\n        --db_host=localhost \\\n        --db_port=$POSTGRES_PORT \\\n        --db_user=\"$DB_USER\" \\\n        --db_password=\"$DB_PASSWORD\" \\\n        --http-port=$ODOO_PORT \\\n        --log-level=info \\\n        --workers=0 \\\n        --dev=reload,qweb,werkzeug,xml \\\n        > \"$ODOO_LOG\" 2>&1 &\n    \n    local odoo_pid=$!\n    echo $odoo_pid > \"$ODOO_PID_FILE\"\n    \n    print_info \"Odoo d√©marr√© avec PID: $odoo_pid\"\n    print_info \"Logs disponibles dans: $ODOO_LOG\"\n    \n    # Attendre qu'Odoo soit pr√™t\n    print_info \"Attente du d√©marrage d'Odoo (peut prendre 1-2 minutes)...\"\n    for i in {1..60}; do\n        if curl -s --connect-timeout 2 \"http://localhost:$ODOO_PORT\" > /dev/null 2>&1; then\n            print_status \"Odoo est pr√™t et accessible\"\n            return 0\n        fi\n        echo -n \".\"\n        sleep 2\n    done\n    \n    print_error \"Odoo n'est pas accessible apr√®s 2 minutes\"\n    print_info \"V√©rifiez les logs: tail -f $ODOO_LOG\"\n    return 1\n}\n\ninstall_mobile_dependencies() {\n    print_header \"INSTALLATION DES D√âPENDANCES MOBILES\"\n    \n    # Application mobile web\n    if [ -d \"$SCRIPT_DIR/mobile_app_web\" ]; then\n        print_info \"Installation des d√©pendances pour l'application mobile web...\"\n        cd \"$SCRIPT_DIR/mobile_app_web\"\n        \n        if [ ! -d \"node_modules\" ]; then\n            npm install\n            print_status \"D√©pendances install√©es pour l'application mobile web\"\n        else\n            print_status \"D√©pendances d√©j√† install√©es pour l'application mobile web\"\n        fi\n        \n        cd \"$SCRIPT_DIR\"\n    fi\n    \n    # Application mobile React Native\n    if [ -d \"$SCRIPT_DIR/mobile_app\" ]; then\n        print_info \"Installation des d√©pendances pour l'application mobile React Native...\"\n        cd \"$SCRIPT_DIR/mobile_app\"\n        \n        if [ ! -d \"node_modules\" ]; then\n            npm install\n            print_status \"D√©pendances install√©es pour l'application mobile React Native\"\n        else\n            print_status \"D√©pendances d√©j√† install√©es pour l'application mobile React Native\"\n        fi\n        \n        cd \"$SCRIPT_DIR\"\n    fi\n}\n\nstart_mobile_web() {\n    print_header \"D√âMARRAGE DE L'APPLICATION MOBILE WEB\"\n    \n    if [ ! -d \"$SCRIPT_DIR/mobile_app_web\" ]; then\n        print_warning \"Application mobile web non trouv√©e, passage...\"\n        return 0\n    fi\n    \n    # V√©rifier si l'application est d√©j√† en cours d'ex√©cution\n    if [ -f \"$MOBILE_WEB_PID_FILE\" ] && kill -0 $(cat \"$MOBILE_WEB_PID_FILE\") 2>/dev/null; then\n        print_status \"Application mobile web d√©j√† en cours d'ex√©cution (PID: $(cat $MOBILE_WEB_PID_FILE))\"\n        return 0\n    fi\n    \n    cd \"$SCRIPT_DIR/mobile_app_web\"\n    \n    # Configuration des variables d'environnement\n    export PORT=\"$MOBILE_WEB_PORT\"\n    export ODOO_URL=\"http://localhost:$ODOO_PORT\"\n    export ODOO_DB=\"$DB_NAME\"\n    export ODOO_USER=\"admin\"\n    export ODOO_PASSWORD=\"admin\"\n    \n    print_info \"D√©marrage de l'application mobile web sur le port $MOBILE_WEB_PORT...\"\n    \n    # D√©marrer l'application en arri√®re-plan\n    nohup npm start > \"$MOBILE_WEB_LOG\" 2>&1 &\n    local mobile_pid=$!\n    echo $mobile_pid > \"$MOBILE_WEB_PID_FILE\"\n    \n    print_info \"Application mobile web d√©marr√©e avec PID: $mobile_pid\"\n    print_info \"Logs disponibles dans: $MOBILE_WEB_LOG\"\n    \n    # Attendre que l'application soit pr√™te\n    print_info \"Attente du d√©marrage de l'application mobile web...\"\n    for i in {1..30}; do\n        if curl -s --connect-timeout 2 \"http://localhost:$MOBILE_WEB_PORT\" > /dev/null 2>&1; then\n            print_status \"Application mobile web pr√™te\"\n            cd \"$SCRIPT_DIR\"\n            return 0\n        fi\n        sleep 2\n    done\n    \n    print_error \"Application mobile web non accessible apr√®s 1 minute\"\n    print_info \"V√©rifiez les logs: tail -f $MOBILE_WEB_LOG\"\n    cd \"$SCRIPT_DIR\"\n    return 1\n}\n\nstart_mobile_app() {\n    print_header \"PR√âPARATION DE L'APPLICATION MOBILE REACT NATIVE\"\n    \n    if [ ! -d \"$SCRIPT_DIR/mobile_app\" ]; then\n        print_warning \"Application mobile React Native non trouv√©e, passage...\"\n        return 0\n    fi\n    \n    cd \"$SCRIPT_DIR/mobile_app\"\n    \n    # V√©rifier le fichier .env\n    if [ ! -f \".env\" ]; then\n        if [ -f \".env.example\" ]; then\n            print_info \"Cr√©ation du fichier .env √† partir de .env.example...\"\n            cp .env.example .env\n            \n            # Mettre √† jour les variables d'environnement\n            sed -i \"s|API_BASE_URL=.*|API_BASE_URL=http://localhost:$ODOO_PORT|g\" .env\n            print_status \"Fichier .env configur√©\"\n        else\n            print_warning \"Fichier .env.example non trouv√©\"\n        fi\n    else\n        print_status \"Fichier .env existe d√©j√†\"\n    fi\n    \n    print_info \"Application React Native pr√™te pour le d√©veloppement\"\n    print_info \"Pour d√©marrer: cd mobile_app && npm start\"\n    print_info \"Pour Android: cd mobile_app && npm run android\"\n    print_info \"Pour iOS: cd mobile_app && npm run ios\"\n    \n    cd \"$SCRIPT_DIR\"\n}\n\n# ========================================\n# FONCTIONS DE TEST ET VALIDATION\n# ========================================\n\ntest_services() {\n    print_header \"TEST DES SERVICES\"\n    \n    # Test Odoo\n    print_info \"Test de l'acc√®s √† Odoo...\"\n    if curl -s \"http://localhost:$ODOO_PORT\" > /dev/null; then\n        print_status \"Odoo accessible sur http://localhost:$ODOO_PORT\"\n    else\n        print_error \"Odoo non accessible\"\n    fi\n    \n    # Test application mobile web\n    if [ -f \"$MOBILE_WEB_PID_FILE\" ]; then\n        print_info \"Test de l'application mobile web...\"\n        if curl -s \"http://localhost:$MOBILE_WEB_PORT\" > /dev/null; then\n            print_status \"Application mobile web accessible sur http://localhost:$MOBILE_WEB_PORT\"\n        else\n            print_error \"Application mobile web non accessible\"\n        fi\n    fi\n    \n    # Test de la base de donn√©es\n    print_info \"Test de la connexion √† la base de donn√©es...\"\n    if psql -h localhost -U $DB_USER -d $DB_NAME -c \"SELECT 1;\" > /dev/null 2>&1; then\n        print_status \"Base de donn√©es accessible\"\n    else\n        print_error \"Base de donn√©es non accessible\"\n    fi\n}\n\n# ========================================\n# FONCTIONS D'ARR√äT\n# ========================================\n\nstop_services() {\n    print_header \"ARR√äT DES SERVICES\"\n    \n    # Arr√™ter l'application mobile web\n    if [ -f \"$MOBILE_WEB_PID_FILE\" ]; then\n        local mobile_pid=$(cat \"$MOBILE_WEB_PID_FILE\")\n        if kill -0 $mobile_pid 2>/dev/null; then\n            print_info \"Arr√™t de l'application mobile web (PID: $mobile_pid)...\"\n            kill $mobile_pid\n            rm -f \"$MOBILE_WEB_PID_FILE\"\n            print_status \"Application mobile web arr√™t√©e\"\n        fi\n    fi\n    \n    # Arr√™ter Odoo\n    if [ -f \"$ODOO_PID_FILE\" ]; then\n        local odoo_pid=$(cat \"$ODOO_PID_FILE\")\n        if kill -0 $odoo_pid 2>/dev/null; then\n            print_info \"Arr√™t d'Odoo (PID: $odoo_pid)...\"\n            kill $odoo_pid\n            rm -f \"$ODOO_PID_FILE\"\n            print_status \"Odoo arr√™t√©\"\n        fi\n    fi\n    \n    print_success \"Tous les services ont √©t√© arr√™t√©s\"\n}\n\ncleanup_on_exit() {\n    echo \"\"\n    print_warning \"Signal d'arr√™t re√ßu, nettoyage en cours...\"\n    stop_services\n    exit 0\n}\n\n# ========================================\n# FONCTION D'AFFICHAGE DES INFORMATIONS\n# ========================================\n\nshow_final_info() {\n    echo \"\"\n    print_header \"üéâ SAMA CONAI FULL STACK D√âMARR√â AVEC SUCC√àS !\"\n    echo \"\"\n    \n    print_success \"üåê Interface Odoo: ${WHITE}http://localhost:$ODOO_PORT${NC}\"\n    if [ -f \"$MOBILE_WEB_PID_FILE\" ]; then\n        print_success \"üì± Application Mobile Web: ${WHITE}http://localhost:$MOBILE_WEB_PORT${NC}\"\n    fi\n    print_success \"üóÑÔ∏è Base de donn√©es: ${WHITE}$DB_NAME${NC}\"\n    \n    echo \"\"\n    print_header \"üîë COMPTES DE CONNEXION:\"\n    echo -e \"${WHITE}   üëë Admin Odoo:${NC} admin / admin\"\n    echo -e \"${WHITE}   üì± Mobile Demo:${NC} demo@sama-conai.sn / demo123\"\n    \n    echo \"\"\n    print_header \"üìä SERVICES ACTIFS:\"\n    if [ -f \"$ODOO_PID_FILE\" ]; then\n        echo -e \"${WHITE}   üîß Odoo:${NC} PID $(cat $ODOO_PID_FILE) - Port $ODOO_PORT\"\n    fi\n    if [ -f \"$MOBILE_WEB_PID_FILE\" ]; then\n        echo -e \"${WHITE}   üì± Mobile Web:${NC} PID $(cat $MOBILE_WEB_PID_FILE) - Port $MOBILE_WEB_PORT\"\n    fi\n    echo -e \"${WHITE}   üóÑÔ∏è PostgreSQL:${NC} Port $POSTGRES_PORT\"\n    \n    echo \"\"\n    print_header \"üìÅ LOGS ET FICHIERS:\"\n    echo -e \"${WHITE}   üìã Logs Odoo:${NC} $ODOO_LOG\"\n    if [ -f \"$MOBILE_WEB_PID_FILE\" ]; then\n        echo -e \"${WHITE}   üìã Logs Mobile:${NC} $MOBILE_WEB_LOG\"\n    fi\n    echo -e \"${WHITE}   üîß PIDs:${NC} $SCRIPT_DIR/.pids/\"\n    \n    echo \"\"\n    print_header \"üõ†Ô∏è COMMANDES UTILES:\"\n    echo -e \"${WHITE}   üîÑ Red√©marrer:${NC} $0 restart\"\n    echo -e \"${WHITE}   üõë Arr√™ter:${NC} $0 stop\"\n    echo -e \"${WHITE}   üìä Statut:${NC} $0 status\"\n    echo -e \"${WHITE}   üìã Logs Odoo:${NC} tail -f $ODOO_LOG\"\n    if [ -f \"$MOBILE_WEB_PID_FILE\" ]; then\n        echo -e \"${WHITE}   üìã Logs Mobile:${NC} tail -f $MOBILE_WEB_LOG\"\n    fi\n    \n    if [ -d \"$SCRIPT_DIR/mobile_app\" ]; then\n        echo \"\"\n        print_header \"üì± APPLICATION MOBILE REACT NATIVE:\"\n        echo -e \"${WHITE}   üöÄ D√©marrer Metro:${NC} cd mobile_app && npm start\"\n        echo -e \"${WHITE}   ü§ñ Android:${NC} cd mobile_app && npm run android\"\n        echo -e \"${WHITE}   üçé iOS:${NC} cd mobile_app && npm run ios\"\n    fi\n    \n    echo \"\"\n    print_success \"üí° ${WHITE}Ouvrez http://localhost:$ODOO_PORT dans votre navigateur${NC}\"\n    print_success \"üá∏üá≥ ${WHITE}Plateforme de transparence du S√©n√©gal op√©rationnelle !${NC}\"\n    \n    echo \"\"\n    print_header \"üåü SAMA CONAI FULL STACK OP√âRATIONNEL !\"\n    echo \"\"\n}\n\nshow_status() {\n    print_header \"STATUT DES SERVICES SAMA CONAI\"\n    \n    # Statut Odoo\n    if [ -f \"$ODOO_PID_FILE\" ] && kill -0 $(cat \"$ODOO_PID_FILE\") 2>/dev/null; then\n        print_status \"Odoo: EN COURS (PID: $(cat $ODOO_PID_FILE), Port: $ODOO_PORT)\"\n    else\n        print_error \"Odoo: ARR√äT√â\"\n    fi\n    \n    # Statut application mobile web\n    if [ -f \"$MOBILE_WEB_PID_FILE\" ] && kill -0 $(cat \"$MOBILE_WEB_PID_FILE\") 2>/dev/null; then\n        print_status \"Application Mobile Web: EN COURS (PID: $(cat $MOBILE_WEB_PID_FILE), Port: $MOBILE_WEB_PORT)\"\n    else\n        print_error \"Application Mobile Web: ARR√äT√âE\"\n    fi\n    \n    # Statut PostgreSQL\n    if pgrep -x \"postgres\" > /dev/null; then\n        print_status \"PostgreSQL: EN COURS (Port: $POSTGRES_PORT)\"\n    else\n        print_error \"PostgreSQL: ARR√äT√â\"\n    fi\n    \n    echo \"\"\n}\n\n# ========================================\n# FONCTION PRINCIPALE\n# ========================================\n\nmain() {\n    local action=\"${1:-start}\"\n    \n    case \"$action\" in\n        \"start\")\n            print_banner\n            check_prerequisites\n            check_directories\n            check_ports\n            start_postgresql\n            setup_database\n            install_mobile_dependencies\n            start_odoo\n            start_mobile_web\n            start_mobile_app\n            test_services\n            show_final_info\n            \n            # Garder le script actif\n            print_info \"Appuyez sur Ctrl+C pour arr√™ter tous les services\"\n            trap cleanup_on_exit INT TERM\n            wait\n            ;;\n        \"stop\")\n            print_banner\n            stop_services\n            ;;\n        \"restart\")\n            print_banner\n            stop_services\n            sleep 3\n            exec \"$0\" start\n            ;;\n        \"status\")\n            print_banner\n            show_status\n            ;;\n        \"logs\")\n            print_header \"AFFICHAGE DES LOGS\"\n            if [ -f \"$ODOO_LOG\" ]; then\n                echo \"=== LOGS ODOO ===\"\n                tail -n 50 \"$ODOO_LOG\"\n            fi\n            if [ -f \"$MOBILE_WEB_LOG\" ]; then\n                echo \"\"\n                echo \"=== LOGS MOBILE WEB ===\"\n                tail -n 50 \"$MOBILE_WEB_LOG\"\n            fi\n            ;;\n        \"help\")\n            print_banner\n            echo \"Usage: $0 [COMMAND]\"\n            echo \"\"\n            echo \"Commands:\"\n            echo \"  start     D√©marrer tous les services (d√©faut)\"\n            echo \"  stop      Arr√™ter tous les services\"\n            echo \"  restart   Red√©marrer tous les services\"\n            echo \"  status    Afficher le statut des services\"\n            echo \"  logs      Afficher les logs r√©cents\"\n            echo \"  help      Afficher cette aide\"\n            echo \"\"\n            ;;\n        *)\n            print_error \"Commande inconnue: $action\"\n            echo \"Utilisez '$0 help' pour voir les commandes disponibles\"\n            exit 1\n            ;;\n    esac\n}\n\n# ========================================\n# EX√âCUTION\n# ========================================\n\n# V√©rifier que le script est ex√©cut√© depuis le bon r√©pertoire\nif [ ! -f \"$SCRIPT_DIR/__manifest__.py\" ]; then\n    print_error \"Ce script doit √™tre ex√©cut√© depuis le r√©pertoire du module SAMA CONAI\"\n    exit 1\nfi\n\n# Ex√©cuter la fonction principale\nmain \"$@\""