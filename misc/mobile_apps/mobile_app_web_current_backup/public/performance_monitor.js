/**\n * Moniteur de performance SAMA CONAI\n * Surveille et affiche les métriques de performance en temps réel\n */\n\nclass PerformanceMonitor {\n    constructor() {\n        this.metrics = {\n            loadTime: 0,\n            apiCalls: 0,\n            cacheHits: 0,\n            cacheMisses: 0,\n            networkErrors: 0\n        };\n        \n        this.startTime = performance.now();\n        this.init();\n    }\n\n    init() {\n        // Surveiller les performances de chargement\n        window.addEventListener('load', () => {\n            this.metrics.loadTime = performance.now() - this.startTime;\n            this.updateIndicator();\n        });\n\n        // Surveiller les appels réseau\n        this.interceptFetch();\n        \n        // Afficher l'indicateur\n        this.createIndicator();\n        \n        // Mettre à jour toutes les 5 secondes\n        setInterval(() => this.updateIndicator(), 5000);\n    }\n\n    interceptFetch() {\n        const originalFetch = window.fetch;\n        \n        window.fetch = async (...args) => {\n            const startTime = performance.now();\n            this.metrics.apiCalls++;\n            \n            try {\n                const response = await originalFetch(...args);\n                const endTime = performance.now();\n                \n                // Enregistrer les métriques\n                if (endTime - startTime > 2000) {\n                    console.warn('🐌 Appel API lent:', args[0], `${Math.round(endTime - startTime)}ms`);\n                }\n                \n                return response;\n            } catch (error) {\n                this.metrics.networkErrors++;\n                throw error;\n            }\n        };\n    }\n\n    createIndicator() {\n        const indicator = document.createElement('div');\n        indicator.id = 'performanceIndicator';\n        indicator.className = 'performance-indicator';\n        indicator.style.display = 'none'; // Masqué par défaut\n        document.body.appendChild(indicator);\n    }\n\n    updateIndicator() {\n        const indicator = document.getElementById('performanceIndicator');\n        if (!indicator) return;\n\n        const cacheStats = window.getCacheStats ? window.getCacheStats() : {};\n        const hitRate = cacheStats.validEntries ? \n            Math.round((cacheStats.validEntries / (cacheStats.validEntries + this.metrics.cacheMisses)) * 100) : 0;\n\n        let status = 'fast';\n        let text = '⚡ Rapide';\n\n        if (!navigator.onLine) {\n            status = 'offline';\n            text = '📡 Offline';\n        } else if (this.metrics.networkErrors > 3) {\n            status = 'slow';\n            text = '🐌 Lent';\n        } else if (hitRate > 70) {\n            text = `⚡ ${hitRate}% cache`;\n        }\n\n        indicator.className = `performance-indicator ${status}`;\n        indicator.textContent = text;\n        \n        // Afficher seulement si nécessaire\n        if (status !== 'fast' || hitRate > 50) {\n            indicator.style.display = 'block';\n        } else {\n            indicator.style.display = 'none';\n        }\n    }\n\n    getMetrics() {\n        return {\n            ...this.metrics,\n            cacheStats: window.getCacheStats ? window.getCacheStats() : {},\n            memoryUsage: performance.memory ? {\n                used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),\n                total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024)\n            } : null\n        };\n    }\n\n    logMetrics() {\n        const metrics = this.getMetrics();\n        console.log('📊 Métriques de performance SAMA CONAI:');\n        console.log('   ⏱️ Temps de chargement:', Math.round(metrics.loadTime), 'ms');\n        console.log('   🌐 Appels API:', metrics.apiCalls);\n        console.log('   ❌ Erreurs réseau:', metrics.networkErrors);\n        \n        if (metrics.cacheStats.validEntries) {\n            console.log('   💾 Cache:', metrics.cacheStats.validEntries, 'entrées');\n            console.log('   📦 Taille cache:', Math.round(metrics.cacheStats.totalSize / 1024), 'KB');\n        }\n        \n        if (metrics.memoryUsage) {\n            console.log('   🧠 Mémoire:', metrics.memoryUsage.used, '/', metrics.memoryUsage.total, 'MB');\n        }\n    }\n}\n\n// Initialiser le moniteur\nconst performanceMonitor = new PerformanceMonitor();\n\n// Exposer globalement\nwindow.performanceMonitor = performanceMonitor;\n\n// Commande pour afficher les métriques\nwindow.showPerformanceMetrics = () => performanceMonitor.logMetrics();\n\nconsole.log('📊 Moniteur de performance SAMA CONAI initialisé');"