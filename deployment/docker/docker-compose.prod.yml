version: '3.8'

# Production Docker Compose for SAMA CONAI
services:
  # PostgreSQL Database with backup
  db:
    image: postgres:15
    container_name: sama_conai_db_prod
    environment:
      POSTGRES_DB: sama_conai_prod
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - sama_conai_db_prod:/var/lib/postgresql/data/pgdata
      - ./backups/db:/backups
    networks:
      - sama_conai_prod_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d sama_conai_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Odoo Production
  odoo:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: sama_conai_odoo_prod
    depends_on:
      db:
        condition: service_healthy
    environment:
      - HOST=db
      - USER=${DB_USER}
      - PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=sama_conai_prod
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - ODOO_ADMIN_PASSWORD=${ODOO_ADMIN_PASSWORD}
      - ODOO_DATABASE=sama_conai_prod
      - WORKERS=4
      - MAX_CRON_THREADS=2
      - LOG_LEVEL=info
    volumes:
      - sama_conai_web_prod:/var/lib/odoo
      - sama_conai_logs_prod:/var/log/odoo
      - ./config/odoo.prod.conf:/etc/odoo/odoo.conf:ro
      - ./backups/filestore:/backups/filestore
    networks:
      - sama_conai_prod_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8069/web/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis for production
  redis:
    image: redis:7-alpine
    container_name: sama_conai_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - sama_conai_redis_prod:/data
    networks:
      - sama_conai_prod_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx with SSL
  nginx:
    image: nginx:alpine
    container_name: sama_conai_nginx_prod
    depends_on:
      - odoo
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - sama_conai_logs_prod:/var/log/nginx
    networks:
      - sama_conai_prod_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Backup service
  backup:
    image: postgres:15
    container_name: sama_conai_backup
    depends_on:
      - db
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - sama_conai_prod_network
    restart: "no"
    command: /bin/bash -c "chmod +x /backup.sh && /backup.sh"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sama_conai_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - sama_conai_prometheus:/prometheus
    networks:
      - sama_conai_prod_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sama_conai_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - sama_conai_grafana:/var/lib/grafana
    networks:
      - sama_conai_prod_network
    restart: unless-stopped

volumes:
  sama_conai_db_prod:
    driver: local
  sama_conai_web_prod:
    driver: local
  sama_conai_redis_prod:
    driver: local
  sama_conai_logs_prod:
    driver: local
  sama_conai_prometheus:
    driver: local
  sama_conai_grafana:
    driver: local

networks:
  sama_conai_prod_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16