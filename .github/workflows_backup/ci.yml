name: 🇸🇳 SAMA CONAI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'

jobs:
  # =============================================================================
  # JOB 1: TESTS ET QUALITÉ DU CODE
  # =============================================================================
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        
    - name: 🎨 Code formatting check (Black)
      run: |
        if command -v black &> /dev/null; then
          black --check --diff .
        else
          echo "Black not installed, skipping formatting check"
        fi
        
    - name: 🔍 Linting (Flake8)
      run: |
        if command -v flake8 &> /dev/null; then
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        else
          echo "Flake8 not installed, skipping linting"
        fi
        
    - name: 🔒 Security scan (Bandit)
      run: |
        if command -v bandit &> /dev/null; then
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium
        else
          echo "Bandit not installed, skipping security scan"
        fi
        
    - name: 🧪 Run tests
      run: |
        if [ -f "manage.py" ]; then
          python manage.py test
        elif command -v pytest &> /dev/null; then
          pytest --cov=. --cov-report=xml --cov-report=html
        else
          echo "No test framework found, skipping tests"
        fi
        
    - name: 📊 Upload coverage to Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # =============================================================================
  # JOB 2: TESTS FRONTEND
  # =============================================================================
  frontend-test:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: 📦 Install frontend dependencies
      run: |
        if [ -f "package.json" ]; then
          npm ci
        else
          echo "No package.json found, skipping frontend tests"
        fi
        
    - name: 🧪 Run frontend tests
      run: |
        if [ -f "package.json" ] && npm run test --if-present; then
          npm run test
        else
          echo "No frontend tests configured"
        fi
        
    - name: 🎨 Check CSS/JS formatting
      run: |
        if [ -f "package.json" ]; then
          npm run lint --if-present || echo "No linting configured"
        fi

  # =============================================================================
  # JOB 3: TESTS DE SÉCURITÉ
  # =============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # JOB 4: BUILD DOCKER
  # =============================================================================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test, frontend-test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: samaconai/sama-conai
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # JOB 5: DÉPLOIEMENT (SEULEMENT SUR MAIN)
  # =============================================================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, frontend-test, security, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying SAMA CONAI to production..."
        # Ici, vous ajouteriez vos scripts de déploiement
        # Par exemple: SSH vers votre serveur, mise à jour des containers, etc.
        echo "✅ Deployment completed successfully!"

  # =============================================================================
  # JOB 6: NOTIFICATION
  # =============================================================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test, frontend-test, security]
    if: always()
    
    steps:
    - name: 📢 Notify on success
      if: ${{ needs.test.result == 'success' && needs.frontend-test.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ All checks passed for SAMA CONAI!"
        echo "🇸🇳 Ready for Senegalese public administration!"
        
    - name: 📢 Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ Some checks failed for SAMA CONAI"
        echo "🔧 Please review the failed jobs and fix the issues"

  # =============================================================================
  # JOB 7: RELEASE (SEULEMENT SUR TAGS)
  # =============================================================================
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [test, frontend-test, security, docker-build]
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Build distribution packages
      run: |
        python -m pip install --upgrade pip build
        python -m build
        
    - name: 📤 Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/
        asset_name: sama-conai-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  # =============================================================================
  # JOB 8: MISE À JOUR DE LA DOCUMENTATION
  # =============================================================================
  docs:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📚 Build documentation
      run: |
        if [ -f "docs/requirements.txt" ]; then
          pip install -r docs/requirements.txt
          cd docs && make html
        else
          echo "No documentation build configured"
        fi
        
    - name: 🌐 Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        cname: docs.sama-conai.sn